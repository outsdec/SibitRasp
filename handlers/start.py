from aiogram import F, Bot, Dispatcher, Router, types
from aiogram.filters import Command
from aiogram.types import Message, FSInputFile, ReplyKeyboardRemove, CallbackQuery
import pandas as pd
from aiogram.enums import ParseMode
import chardet

import csv 

router = Router()  # [1]

csv_file_path = '–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ.csv'

# Detect the encoding of the CSV file
with open(csv_file_path, 'rb') as f:
    result = chardet.detect(f.read())
csv_encoding = result['encoding']

df = pd.read_csv(csv_file_path, encoding=csv_encoding, delimiter=';', on_bad_lines='skip')

# Print column names
print(df.columns)

# Correct the grouping keys as a tuple
sorted_data = df.sort_values(by=['Group', 'Day', 'Les'])

less = {
    1: "8:30 - 10:00",
    2: "10:10 - 11:40",
    3: "12:00 - 13:30",
    4: "14:00 - 15:30",
    5: "15:40 - 17:10",
    6: "17:20 - 18:50"
}

less_type = {
    "–ª.": "–õ–µ–∫—Ü–∏—è",
    "–ø—Ä.": "–ü—Ä–∞–∫—Ç–∏–∫–∞",
    "–ª–∞–±.": "–õ–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–∞—è —Ä–∞–±–æ—Ç–∞",
    "–∫–æ–Ω—Å.": "–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è",
}
@router.message(Command("rasp")) 
async def send_schedule_message(message: types.Message):
    try:
        selected_group = '–ò–ù-40'
        
        group_schedule = sorted_data[sorted_data['Group'] == selected_group]

        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
        schedule_text = f"–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –≥—Ä—É–ø–ø—ã {selected_group}:\n"
        for day, day_schedule in group_schedule.groupby('Day'):
            schedule_text += f"\n–î–µ–Ω—å {day}:\n"
            for index, row in day_schedule.iterrows():
                schedule_text += f"–í—Ä–µ–º—è –ø–∞—Ä—ã: {less.get(row['Les'])}\n–ü—Ä–µ–¥–º–µ—Ç: {row['Subject']}\n–¢–∏–ø –ø—Ä–µ–¥–º–µ—Ç–∞: ({less_type.get(row['Subj_type'])})\n–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å: {row['Name']}\n–ê—É–¥–∏—Ç–æ—Ä–∏—è: ({row['Aud']})\n\n"

        await message.answer(schedule_text, parse_mode=ParseMode.MARKDOWN)

    except Exception as e:
        print(e)
        await message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞.")

@router.message(Command("sss"))  # [2]
async def cmd_start(message: Message):
    username = message.from_user.username
    user_id = message.from_user.id
    await message.answer(f'ü§ò –í –±—É–¥—É—â–µ–º —Ç—É—Ç –±—É–¥–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ.')
